{"ast":null,"code":"// Underscore-contrib (underscore.array.builders.js 0.3.0)\n// (c) 2013 Michael Fogus, DocumentCloud and Investigative Reporters & Editors\n// Underscore-contrib may be freely distributed under the MIT license.\n\n(function (root) {\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `global` on the server.\n  var _ = root._ || require('underscore');\n\n  // Helpers\n  // -------\n\n  // Create quick reference variables for speed access to core prototypes.\n  var slice = Array.prototype.slice,\n    concat = Array.prototype.concat;\n  var existy = function (x) {\n    return x != null;\n  };\n\n  // Mixing in the array builders\n  // ----------------------------\n\n  _.mixin({\n    // Concatenates one or more arrays given as arguments.  If given objects and\n    // scalars as arguments `cat` will plop them down in place in the result \n    // array.  If given an `arguments` object, `cat` will treat it like an array\n    // and concatenate it likewise.\n    cat: function () {\n      return _.reduce(arguments, function (acc, elem) {\n        if (_.isArguments(elem)) {\n          return concat.call(acc, slice.call(elem));\n        } else {\n          return concat.call(acc, elem);\n        }\n      }, []);\n    },\n    // 'Constructs' an array by putting an element at its front\n    cons: function (head, tail) {\n      return _.cat([head], tail);\n    },\n    // Takes an array and chunks it some number of times into\n    // sub-arrays of size n.  Allows and optional padding array as\n    // the third argument to fill in the tail chunk when n is\n    // not sufficient to build chunks of the same size.\n    chunk: function (array, n, pad) {\n      var p = function (array) {\n        if (array == null) return [];\n        var part = _.take(array, n);\n        if (n === _.size(part)) {\n          return _.cons(part, p(_.drop(array, n)));\n        } else {\n          return pad ? [_.take(_.cat(part, pad), n)] : [];\n        }\n      };\n      return p(array);\n    },\n    // Takes an array and chunks it some number of times into\n    // sub-arrays of size n.  If the array given cannot fill the size\n    // needs of the final chunk then a smaller chunk is used\n    // for the last.\n    chunkAll: function (array, n, step) {\n      step = step != null ? step : n;\n      var p = function (array, n, step) {\n        if (_.isEmpty(array)) return [];\n        return _.cons(_.take(array, n), p(_.drop(array, step), n, step));\n      };\n      return p(array, n, step);\n    },\n    // Maps a function over an array and concatenates all of the results.\n    mapcat: function (array, fun) {\n      return _.cat.apply(null, _.map(array, fun));\n    },\n    // Returns an array with some item between each element\n    // of a given array.\n    interpose: function (array, inter) {\n      if (!_.isArray(array)) throw new TypeError();\n      var sz = _.size(array);\n      if (sz === 0) return array;\n      if (sz === 1) return array;\n      return slice.call(_.mapcat(array, function (elem) {\n        return _.cons(elem, [inter]);\n      }), 0, -1);\n    },\n    // Weaves two or more arrays together\n    weave: function /* args */\n    () {\n      if (!_.some(arguments)) return [];\n      if (arguments.length == 1) return arguments[0];\n      return _.filter(_.flatten(_.zip.apply(null, arguments), true), function (elem) {\n        return elem != null;\n      });\n    },\n    interleave: _.weave,\n    // Returns an array of a value repeated a certain number of\n    // times.\n    repeat: function (t, elem) {\n      return _.times(t, function () {\n        return elem;\n      });\n    },\n    // Returns an array built from the contents of a given array repeated\n    // a certain number of times.\n    cycle: function (t, elems) {\n      return _.flatten(_.times(t, function () {\n        return elems;\n      }), true);\n    },\n    // Returns an array with two internal arrays built from\n    // taking an original array and spliting it at an index.\n    splitAt: function (array, index) {\n      return [_.take(array, index), _.drop(array, index)];\n    },\n    // Call a function recursively f(f(f(args))) until a second\n    // given function goes falsey.  Expects a seed value to start.\n    iterateUntil: function (doit, checkit, seed) {\n      var ret = [];\n      var result = doit(seed);\n      while (checkit(result)) {\n        ret.push(result);\n        result = doit(result);\n      }\n      return ret;\n    },\n    // Takes every nth item from an array, returning an array of\n    // the results.\n    takeSkipping: function (array, n) {\n      var ret = [];\n      var sz = _.size(array);\n      if (n <= 0) return [];\n      if (n === 1) return array;\n      for (var index = 0; index < sz; index += n) {\n        ret.push(array[index]);\n      }\n      return ret;\n    },\n    // Returns an array of each intermediate stage of a call to\n    // a `reduce`-like function.\n    reductions: function (array, fun, init) {\n      var ret = [];\n      var acc = init;\n      _.each(array, function (v, k) {\n        acc = fun(acc, array[k]);\n        ret.push(acc);\n      });\n      return ret;\n    },\n    // Runs its given function on the index of the elements rather than \n    // the elements themselves, keeping all of the truthy values in the end.\n    keepIndexed: function (array, pred) {\n      return _.filter(_.map(_.range(_.size(array)), function (i) {\n        return pred(i, array[i]);\n      }), existy);\n    },\n    // Accepts an array-like object (other than strings) as an argument and\n    // returns an array whose elements are in the reverse order. Unlike the\n    // built-in `Array.prototype.reverse` method, this does not mutate the\n    // original object. Note: attempting to use this method on a string will\n    // result in a `TypeError`, as it cannot properly reverse unicode strings.\n\n    reverseOrder: function (obj) {\n      if (typeof obj == 'string') throw new TypeError('Strings cannot be reversed by _.reverseOrder');\n      return slice.call(obj).reverse();\n    }\n  });\n})(this);","map":{"version":3,"names":["root","_","require","slice","Array","prototype","concat","existy","x","mixin","cat","reduce","arguments","acc","elem","isArguments","call","cons","head","tail","chunk","array","n","pad","p","part","take","size","drop","chunkAll","step","isEmpty","mapcat","fun","apply","map","interpose","inter","isArray","TypeError","sz","weave","some","length","filter","flatten","zip","interleave","repeat","t","times","cycle","elems","splitAt","index","iterateUntil","doit","checkit","seed","ret","result","push","takeSkipping","reductions","init","each","v","k","keepIndexed","pred","range","i","reverseOrder","obj","reverse"],"sources":["/Users/guneysogut/guney/projects/AMS/ams/node_modules/underscore-contrib/underscore.array.builders.js"],"sourcesContent":["// Underscore-contrib (underscore.array.builders.js 0.3.0)\n// (c) 2013 Michael Fogus, DocumentCloud and Investigative Reporters & Editors\n// Underscore-contrib may be freely distributed under the MIT license.\n\n(function(root) {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `global` on the server.\n  var _ = root._ || require('underscore');\n\n  // Helpers\n  // -------\n  \n  // Create quick reference variables for speed access to core prototypes.\n  var slice   = Array.prototype.slice,\n      concat  = Array.prototype.concat;\n\n  var existy = function(x) { return x != null; };\n\n  // Mixing in the array builders\n  // ----------------------------\n\n  _.mixin({\n    // Concatenates one or more arrays given as arguments.  If given objects and\n    // scalars as arguments `cat` will plop them down in place in the result \n    // array.  If given an `arguments` object, `cat` will treat it like an array\n    // and concatenate it likewise.\n    cat: function() {\n      return _.reduce(arguments, function(acc, elem) {\n        if (_.isArguments(elem)) {\n          return concat.call(acc, slice.call(elem));\n        }\n        else {\n          return concat.call(acc, elem);\n        }\n      }, []);\n    },\n\n    // 'Constructs' an array by putting an element at its front\n    cons: function(head, tail) {\n      return _.cat([head], tail);\n    },\n\n    // Takes an array and chunks it some number of times into\n    // sub-arrays of size n.  Allows and optional padding array as\n    // the third argument to fill in the tail chunk when n is\n    // not sufficient to build chunks of the same size.\n    chunk: function(array, n, pad) {\n      var p = function(array) {\n        if (array == null) return [];\n\n        var part = _.take(array, n);\n\n        if (n === _.size(part)) {\n          return _.cons(part, p(_.drop(array, n)));\n        }\n        else {\n          return pad ? [_.take(_.cat(part, pad), n)] : [];\n        }\n      };\n\n      return p(array);\n    },\n\n    // Takes an array and chunks it some number of times into\n    // sub-arrays of size n.  If the array given cannot fill the size\n    // needs of the final chunk then a smaller chunk is used\n    // for the last.\n    chunkAll: function(array, n, step) {\n      step = (step != null) ? step : n;\n\n      var p = function(array, n, step) {\n        if (_.isEmpty(array)) return [];\n\n        return _.cons(_.take(array, n),\n                      p(_.drop(array, step), n, step));\n      };\n\n      return p(array, n, step);\n    },\n\n    // Maps a function over an array and concatenates all of the results.\n    mapcat: function(array, fun) {\n      return _.cat.apply(null, _.map(array, fun));\n    },\n\n    // Returns an array with some item between each element\n    // of a given array.\n    interpose: function(array, inter) {\n      if (!_.isArray(array)) throw new TypeError;\n      var sz = _.size(array);\n      if (sz === 0) return array;\n      if (sz === 1) return array;\n\n      return slice.call(_.mapcat(array, function(elem) { \n        return _.cons(elem, [inter]);\n      }), 0, -1);\n    },\n\n    // Weaves two or more arrays together\n    weave: function(/* args */) {\n      if (!_.some(arguments)) return [];\n      if (arguments.length == 1) return arguments[0];\n\n      return _.filter(_.flatten(_.zip.apply(null, arguments), true), function(elem) {\n        return elem != null;\n      });\n    },\n    interleave: _.weave,\n\n    // Returns an array of a value repeated a certain number of\n    // times.\n    repeat: function(t, elem) {\n      return _.times(t, function() { return elem; });\n    },\n\n    // Returns an array built from the contents of a given array repeated\n    // a certain number of times.\n    cycle: function(t, elems) {\n      return _.flatten(_.times(t, function() { return elems; }), true);\n    },\n\n    // Returns an array with two internal arrays built from\n    // taking an original array and spliting it at an index.\n    splitAt: function(array, index) {\n      return [_.take(array, index), _.drop(array, index)];\n    },\n\n    // Call a function recursively f(f(f(args))) until a second\n    // given function goes falsey.  Expects a seed value to start.\n    iterateUntil: function(doit, checkit, seed) {\n      var ret = [];\n      var result = doit(seed);\n\n      while (checkit(result)) {\n        ret.push(result);\n        result = doit(result);\n      }\n\n      return ret;\n    },\n\n    // Takes every nth item from an array, returning an array of\n    // the results.\n    takeSkipping: function(array, n) {\n      var ret = [];\n      var sz = _.size(array);\n\n      if (n <= 0) return [];\n      if (n === 1) return array;\n\n      for(var index = 0; index < sz; index += n) {\n        ret.push(array[index]);\n      }\n\n      return ret;\n    },\n\n    // Returns an array of each intermediate stage of a call to\n    // a `reduce`-like function.\n    reductions: function(array, fun, init) {\n      var ret = [];\n      var acc = init;\n\n      _.each(array, function(v,k) {\n        acc = fun(acc, array[k]);\n        ret.push(acc);\n      });\n\n      return ret;\n    },\n\n    // Runs its given function on the index of the elements rather than \n    // the elements themselves, keeping all of the truthy values in the end.\n    keepIndexed: function(array, pred) {\n      return _.filter(_.map(_.range(_.size(array)), function(i) {\n        return pred(i, array[i]);\n      }),\n      existy);\n    },\n\n    // Accepts an array-like object (other than strings) as an argument and\n    // returns an array whose elements are in the reverse order. Unlike the\n    // built-in `Array.prototype.reverse` method, this does not mutate the\n    // original object. Note: attempting to use this method on a string will\n    // result in a `TypeError`, as it cannot properly reverse unicode strings.\n\n    reverseOrder: function(obj) {\n      if (typeof obj == 'string')\n        throw new TypeError('Strings cannot be reversed by _.reverseOrder');\n      return slice.call(obj).reverse();\n    }\n  });\n\n})(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}