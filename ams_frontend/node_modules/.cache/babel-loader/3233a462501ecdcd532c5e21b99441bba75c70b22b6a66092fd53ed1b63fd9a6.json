{"ast":null,"code":"// Underscore-contrib (underscore.function.predicates.js 0.3.0)\n// (c) 2013 Michael Fogus, DocumentCloud and Investigative Reporters & Editors\n// Underscore-contrib may be freely distributed under the MIT license.\n\n(function (root) {\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `global` on the server.\n  var _ = root._ || require('underscore');\n\n  // Helpers\n  // -------\n\n  // Mixing in the predicate functions\n  // ---------------------------------\n\n  _.mixin({\n    // A wrapper around instanceof\n    isInstanceOf: function (x, t) {\n      return x instanceof t;\n    },\n    // An associative object is one where its elements are\n    // accessed via a key or index. (i.e. array and object)\n    isAssociative: function (x) {\n      return _.isArray(x) || _.isObject(x) || _.isArguments(x);\n    },\n    // An indexed object is anything that allows numerical index for\n    // accessing its elements (e.g. arrays and strings). NOTE: Underscore\n    // does not support cross-browser consistent use of strings as array-like\n    // objects, so be wary in IE 8 when using  String objects and IE<8.\n    // on string literals & objects.\n    isIndexed: function (x) {\n      return _.isArray(x) || _.isString(x) || _.isArguments(x);\n    },\n    // A seq is something considered a sequential composite type (i.e. arrays and `arguments`).\n    isSequential: function (x) {\n      return _.isArray(x) || _.isArguments(x);\n    },\n    // Check if an object is an object literal, since _.isObject(function() {}) === _.isObject([]) === true\n    isPlainObject: function (x) {\n      return _.isObject(x) && x.constructor === root.Object;\n    },\n    // These do what you think that they do\n    isZero: function (x) {\n      return 0 === x;\n    },\n    isEven: function (x) {\n      return _.isFinite(x) && (x & 1) === 0;\n    },\n    isOdd: function (x) {\n      return _.isFinite(x) && !_.isEven(x);\n    },\n    isPositive: function (x) {\n      return x > 0;\n    },\n    isNegative: function (x) {\n      return x < 0;\n    },\n    isValidDate: function (x) {\n      return _.isDate(x) && !_.isNaN(x.getTime());\n    },\n    // A numeric is a variable that contains a numeric value, regardless its type\n    // It can be a String containing a numeric value, exponential notation, or a Number object\n    // See here for more discussion: http://stackoverflow.com/questions/18082/validate-numbers-in-javascript-isnumeric/1830844#1830844\n    isNumeric: function (n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    },\n    // An integer contains an optional minus sign to begin and only the digits 0-9\n    // Objects that can be parsed that way are also considered ints, e.g. \"123\"\n    // Floats that are mathematically equal to integers are considered integers, e.g. 1.0\n    // See here for more discussion: http://stackoverflow.com/questions/1019515/javascript-test-for-an-integer\n    isInteger: function (i) {\n      return _.isNumeric(i) && i % 1 === 0;\n    },\n    // A float is a numbr that is not an integer.\n    isFloat: function (n) {\n      return _.isNumeric(n) && !_.isInteger(n);\n    },\n    // checks if a string is a valid JSON\n    isJSON: function (str) {\n      try {\n        JSON.parse(str);\n      } catch (e) {\n        return false;\n      }\n      return true;\n    },\n    // Returns true if its arguments are monotonically\n    // increaing values; false otherwise.\n    isIncreasing: function () {\n      var count = _.size(arguments);\n      if (count === 1) return true;\n      if (count === 2) return arguments[0] < arguments[1];\n      for (var i = 1; i < count; i++) {\n        if (arguments[i - 1] >= arguments[i]) {\n          return false;\n        }\n      }\n      return true;\n    },\n    // Returns true if its arguments are monotonically\n    // decreaing values; false otherwise.\n    isDecreasing: function () {\n      var count = _.size(arguments);\n      if (count === 1) return true;\n      if (count === 2) return arguments[0] > arguments[1];\n      for (var i = 1; i < count; i++) {\n        if (arguments[i - 1] <= arguments[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n})(this);","map":{"version":3,"names":["root","_","require","mixin","isInstanceOf","x","t","isAssociative","isArray","isObject","isArguments","isIndexed","isString","isSequential","isPlainObject","constructor","Object","isZero","isEven","isFinite","isOdd","isPositive","isNegative","isValidDate","isDate","isNaN","getTime","isNumeric","n","parseFloat","isInteger","i","isFloat","isJSON","str","JSON","parse","e","isIncreasing","count","size","arguments","isDecreasing"],"sources":["/Users/guneysogut/guney/projects/AMS/ams/node_modules/underscore-contrib/underscore.function.predicates.js"],"sourcesContent":["// Underscore-contrib (underscore.function.predicates.js 0.3.0)\n// (c) 2013 Michael Fogus, DocumentCloud and Investigative Reporters & Editors\n// Underscore-contrib may be freely distributed under the MIT license.\n\n(function(root) {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `global` on the server.\n  var _ = root._ || require('underscore');\n\n  // Helpers\n  // -------\n\n\n  // Mixing in the predicate functions\n  // ---------------------------------\n\n  _.mixin({\n    // A wrapper around instanceof\n    isInstanceOf: function(x, t) { return (x instanceof t); },\n\n    // An associative object is one where its elements are\n    // accessed via a key or index. (i.e. array and object)\n    isAssociative: function(x) { return _.isArray(x) || _.isObject(x) || _.isArguments(x); },\n\n    // An indexed object is anything that allows numerical index for\n    // accessing its elements (e.g. arrays and strings). NOTE: Underscore\n    // does not support cross-browser consistent use of strings as array-like\n    // objects, so be wary in IE 8 when using  String objects and IE<8.\n    // on string literals & objects.\n    isIndexed: function(x) { return _.isArray(x) || _.isString(x) || _.isArguments(x); },\n\n    // A seq is something considered a sequential composite type (i.e. arrays and `arguments`).\n    isSequential: function(x) { return (_.isArray(x)) || (_.isArguments(x)); },\n\n    // Check if an object is an object literal, since _.isObject(function() {}) === _.isObject([]) === true\n    isPlainObject: function(x) { return _.isObject(x) && x.constructor === root.Object; },\n\n    // These do what you think that they do\n    isZero: function(x) { return 0 === x; },\n    isEven: function(x) { return _.isFinite(x) && (x & 1) === 0; },\n    isOdd: function(x) { return _.isFinite(x) && !_.isEven(x); },\n    isPositive: function(x) { return x > 0; },\n    isNegative: function(x) { return x < 0; },\n    isValidDate: function(x) { return _.isDate(x) && !_.isNaN(x.getTime()); },\n\n    // A numeric is a variable that contains a numeric value, regardless its type\n    // It can be a String containing a numeric value, exponential notation, or a Number object\n    // See here for more discussion: http://stackoverflow.com/questions/18082/validate-numbers-in-javascript-isnumeric/1830844#1830844\n    isNumeric: function(n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    },\n\n    // An integer contains an optional minus sign to begin and only the digits 0-9\n    // Objects that can be parsed that way are also considered ints, e.g. \"123\"\n    // Floats that are mathematically equal to integers are considered integers, e.g. 1.0\n    // See here for more discussion: http://stackoverflow.com/questions/1019515/javascript-test-for-an-integer\n    isInteger: function(i) {\n      return _.isNumeric(i) && i % 1 === 0;\n    },\n\n    // A float is a numbr that is not an integer.\n    isFloat: function(n) {\n      return _.isNumeric(n) && !_.isInteger(n);\n    },\n\n    // checks if a string is a valid JSON\n    isJSON: function(str) {\n      try {\n        JSON.parse(str);\n      } catch (e) {\n        return false;\n      }\n      return true;\n    },\n\n    // Returns true if its arguments are monotonically\n    // increaing values; false otherwise.\n    isIncreasing: function() {\n      var count = _.size(arguments);\n      if (count === 1) return true;\n      if (count === 2) return arguments[0] < arguments[1];\n\n      for (var i = 1; i < count; i++) {\n        if (arguments[i-1] >= arguments[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    // Returns true if its arguments are monotonically\n    // decreaing values; false otherwise.\n    isDecreasing: function() {\n      var count = _.size(arguments);\n      if (count === 1) return true;\n      if (count === 2) return arguments[0] > arguments[1];\n\n      for (var i = 1; i < count; i++) {\n        if (arguments[i-1] <= arguments[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n\n})(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}