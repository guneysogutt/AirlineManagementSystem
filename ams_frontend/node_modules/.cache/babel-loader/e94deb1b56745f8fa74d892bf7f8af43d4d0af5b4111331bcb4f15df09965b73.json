{"ast":null,"code":"// Underscore-contrib (underscore.array.selectors.js 0.3.0)\n// (c) 2013 Michael Fogus, DocumentCloud and Investigative Reporters & Editors\n// Underscore-contrib may be freely distributed under the MIT license.\n\n(function (root) {\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `global` on the server.\n  var _ = root._ || require('underscore');\n\n  // Helpers\n  // -------\n\n  // Create quick reference variables for speed access to core prototypes.\n  var slice = Array.prototype.slice,\n    concat = Array.prototype.concat;\n  var existy = function (x) {\n    return x != null;\n  };\n  var truthy = function (x) {\n    return x !== false && existy(x);\n  };\n  var isSeq = function (x) {\n    return _.isArray(x) || _.isArguments(x);\n  };\n\n  // Mixing in the array selectors\n  // ----------------------------\n\n  _.mixin({\n    // Returns the second element of an array. Passing **n** will return all but\n    // the first of the head N values in the array.  The **guard** check allows it\n    // to work with `_.map`.\n    second: function (array, n, guard) {\n      if (array == null) return void 0;\n      return n != null && !guard ? slice.call(array, 1, n) : array[1];\n    },\n    // Returns the third element of an array. Passing **n** will return all but\n    // the first two of the head N values in the array.  The **guard** check allows it\n    // to work with `_.map`.\n    third: function (array, n, guard) {\n      if (array == null) return void 0;\n      return n != null && !guard ? slice.call(array, 2, n) : array[2];\n    },\n    // A function to get at an index into an array\n    nth: function (array, index, guard) {\n      if (index != null && !guard) return array[index];\n    },\n    // Takes all items in an array while a given predicate returns truthy.\n    takeWhile: function (array, pred) {\n      if (!isSeq(array)) throw new TypeError();\n      var sz = _.size(array);\n      for (var index = 0; index < sz; index++) {\n        if (!truthy(pred(array[index]))) {\n          break;\n        }\n      }\n      return _.take(array, index);\n    },\n    // Drops all items from an array while a given predicate returns truthy.\n    dropWhile: function (array, pred) {\n      if (!isSeq(array)) throw new TypeError();\n      var sz = _.size(array);\n      for (var index = 0; index < sz; index++) {\n        if (!truthy(pred(array[index]))) break;\n      }\n      return _.drop(array, index);\n    },\n    // Returns an array with two internal arrays built from\n    // taking an original array and spliting it at the index\n    // where a given function goes falsey.\n    splitWith: function (array, pred) {\n      return [_.takeWhile(array, pred), _.dropWhile(array, pred)];\n    },\n    // Takes an array and partitions it as the given predicate changes\n    // truth sense.\n    partitionBy: function (array, fun) {\n      if (_.isEmpty(array) || !existy(array)) return [];\n      var fst = _.first(array);\n      var fstVal = fun(fst);\n      var run = concat.call([fst], _.takeWhile(_.rest(array), function (e) {\n        return _.isEqual(fstVal, fun(e));\n      }));\n      return concat.call([run], _.partitionBy(_.drop(array, _.size(run)), fun));\n    },\n    // Returns the 'best' value in an array based on the result of a\n    // given function.\n    best: function (array, fun) {\n      return _.reduce(array, function (x, y) {\n        return fun(x, y) ? x : y;\n      });\n    },\n    // Returns an array of existy results of a function over an source array.\n    keep: function (array, fun) {\n      if (!isSeq(array)) throw new TypeError(\"expected an array as the first argument\");\n      return _.filter(_.map(array, function (e) {\n        return fun(e);\n      }), existy);\n    }\n  });\n})(this);","map":{"version":3,"names":["root","_","require","slice","Array","prototype","concat","existy","x","truthy","isSeq","isArray","isArguments","mixin","second","array","n","guard","call","third","nth","index","takeWhile","pred","TypeError","sz","size","take","dropWhile","drop","splitWith","partitionBy","fun","isEmpty","fst","first","fstVal","run","rest","e","isEqual","best","reduce","y","keep","filter","map"],"sources":["/Users/guneysogut/guney/projects/AMS/ams/node_modules/underscore-contrib/underscore.array.selectors.js"],"sourcesContent":["// Underscore-contrib (underscore.array.selectors.js 0.3.0)\r\n// (c) 2013 Michael Fogus, DocumentCloud and Investigative Reporters & Editors\r\n// Underscore-contrib may be freely distributed under the MIT license.\r\n\r\n(function(root) {\r\n\r\n  // Baseline setup\r\n  // --------------\r\n\r\n  // Establish the root object, `window` in the browser, or `global` on the server.\r\n  var _ = root._ || require('underscore');\r\n\r\n  // Helpers\r\n  // -------\r\n\r\n  // Create quick reference variables for speed access to core prototypes.\r\n  var slice   = Array.prototype.slice,\r\n      concat  = Array.prototype.concat;\r\n\r\n  var existy = function(x) { return x != null; };\r\n  var truthy = function(x) { return (x !== false) && existy(x); };\r\n  var isSeq = function(x) { return (_.isArray(x)) || (_.isArguments(x)); };\r\n\r\n  // Mixing in the array selectors\r\n  // ----------------------------\r\n\r\n  _.mixin({\r\n    // Returns the second element of an array. Passing **n** will return all but\r\n    // the first of the head N values in the array.  The **guard** check allows it\r\n    // to work with `_.map`.\r\n    second: function(array, n, guard) {\r\n      if (array == null) return void 0;\r\n      return (n != null) && !guard ? slice.call(array, 1, n) : array[1];\r\n    },\r\n\r\n    // Returns the third element of an array. Passing **n** will return all but\r\n    // the first two of the head N values in the array.  The **guard** check allows it\r\n    // to work with `_.map`.\r\n    third: function(array, n, guard) {\r\n      if (array == null) return void 0;\r\n      return (n != null) && !guard ? slice.call(array, 2, n) : array[2];\r\n    },\r\n\r\n    // A function to get at an index into an array\r\n    nth: function(array, index, guard) {\r\n      if ((index != null) && !guard) return array[index];\r\n    },\r\n\r\n    // Takes all items in an array while a given predicate returns truthy.\r\n    takeWhile: function(array, pred) {\r\n      if (!isSeq(array)) throw new TypeError;\r\n\r\n      var sz = _.size(array);\r\n\r\n      for (var index = 0; index < sz; index++) {\r\n        if(!truthy(pred(array[index]))) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      return _.take(array, index);\r\n    },\r\n\r\n    // Drops all items from an array while a given predicate returns truthy.\r\n    dropWhile: function(array, pred) {\r\n      if (!isSeq(array)) throw new TypeError;\r\n\r\n      var sz = _.size(array);\r\n\r\n      for (var index = 0; index < sz; index++) {\r\n        if(!truthy(pred(array[index])))\r\n          break;\r\n      }\r\n\r\n      return _.drop(array, index);\r\n    },\r\n\r\n    // Returns an array with two internal arrays built from\r\n    // taking an original array and spliting it at the index\r\n    // where a given function goes falsey.\r\n    splitWith: function(array, pred) {\r\n      return [_.takeWhile(array, pred), _.dropWhile(array, pred)];\r\n    },\r\n\r\n    // Takes an array and partitions it as the given predicate changes\r\n    // truth sense.\r\n    partitionBy: function(array, fun){\r\n      if (_.isEmpty(array) || !existy(array)) return [];\r\n\r\n      var fst    = _.first(array);\r\n      var fstVal = fun(fst);\r\n      var run    = concat.call([fst], _.takeWhile(_.rest(array), function(e) {\r\n        return _.isEqual(fstVal, fun(e));\r\n      }));\r\n\r\n      return concat.call([run], _.partitionBy(_.drop(array, _.size(run)), fun));\r\n    },\r\n\r\n    // Returns the 'best' value in an array based on the result of a\r\n    // given function.\r\n    best: function(array, fun) {\r\n      return _.reduce(array, function(x, y) {\r\n        return fun(x, y) ? x : y;\r\n      });\r\n    },\r\n\r\n    // Returns an array of existy results of a function over an source array.\r\n    keep: function(array, fun) {\r\n      if (!isSeq(array)) throw new TypeError(\"expected an array as the first argument\");\r\n\r\n      return _.filter(_.map(array, function(e) {\r\n        return fun(e);\r\n      }), existy);\r\n    }\r\n  });\r\n\r\n})(this);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}