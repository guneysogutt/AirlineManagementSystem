{"ast":null,"code":"var _jsxFileName = \"/Users/guneysogut/guney/projects/AMS/ams/src/routes/dashboard/ListFlight.js\",\n  _s = $RefreshSig$();\nimport { axios } from '../../index';\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nimport { Box, Chip } from '@mui/material';\nimport { useLoaderData } from 'react-router-dom';\nimport { EmptyPage } from '../../components/Page';\nimport dayjs from 'dayjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dateFormatter = params => dayjs(params.value).format('llll');\nconst capitalize = s => s.charAt(0).toUpperCase() + s.slice(1);\nconst styles = {\n  completed: {},\n  onflight: {\n    backgroundColor: 'primary.main',\n    color: 'white'\n  },\n  scheduled: {\n    backgroundColor: 'violet'\n  }\n};\nconst Status = ({\n  status\n}) => /*#__PURE__*/_jsxDEV(Chip, {\n  size: \"small\",\n  label: capitalize(status),\n  sx: {\n    width: '100px',\n    ...styles[status]\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 23,\n  columnNumber: 3\n}, this);\n_c = Status;\nconst columns = [{\n  field: 'id',\n  headerName: 'ID'\n}, {\n  field: 'flight_number',\n  headerName: 'Flight Number',\n  flex: 1\n}, {\n  field: 'departure_airport',\n  headerName: 'From',\n  flex: 1\n}, {\n  field: 'destination_airport',\n  headerName: 'To',\n  flex: 1\n}, {\n  field: 'departure_time',\n  headerName: 'Departure',\n  flex: 2,\n  valueFormatter: dateFormatter\n}, {\n  field: 'arrival_time',\n  headerName: 'Arrival',\n  flex: 2,\n  valueFormatter: dateFormatter\n}, {\n  field: 'gate_number',\n  headerName: 'Gate',\n  flex: 1\n}, {\n  field: 'plane_registration',\n  headerName: 'Registration',\n  flex: 1\n}, {\n  field: 'status',\n  headerName: 'Status',\n  flex: 1,\n  renderCell: params => /*#__PURE__*/_jsxDEV(Status, {\n    status: params.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 27\n  }, this)\n}];\nexport function ListFlight() {\n  _s();\n  // Note: MUI DataGrid requires all rows to have a unique `id` property.\n  // Since our database handles that case, we don't need to map any rows.\n  const rows = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(EmptyPage, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      flexGrow: 1,\n      height: \"100vh\",\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: rows,\n        columns: columns,\n        disableRowSelectionOnClick: true,\n        slots: {\n          toolbar: GridToolbar\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(ListFlight, \"nuXnS2ZIQYMCsgkGsAeXF3FE9VE=\", false, function () {\n  return [useLoaderData];\n});\n_c2 = ListFlight;\nexport async function listFlightLoader() {\n  const response = await axios.get('/flight/all');\n  return response.data;\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"Status\");\n$RefreshReg$(_c2, \"ListFlight\");","map":{"version":3,"names":["axios","DataGrid","GridToolbar","Box","Chip","useLoaderData","EmptyPage","dayjs","jsxDEV","_jsxDEV","dateFormatter","params","value","format","capitalize","s","charAt","toUpperCase","slice","styles","completed","onflight","backgroundColor","color","scheduled","Status","status","size","label","sx","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","columns","field","headerName","flex","valueFormatter","renderCell","ListFlight","_s","rows","children","flexGrow","height","disableRowSelectionOnClick","slots","toolbar","_c2","listFlightLoader","response","get","data","$RefreshReg$"],"sources":["/Users/guneysogut/guney/projects/AMS/ams/src/routes/dashboard/ListFlight.js"],"sourcesContent":["import { axios } from '../../index';\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nimport { Box, Chip } from '@mui/material';\nimport { useLoaderData } from 'react-router-dom';\nimport { EmptyPage } from '../../components/Page';\nimport dayjs from 'dayjs';\n\nconst dateFormatter = params => dayjs(params.value).format('llll');\nconst capitalize = s => s.charAt(0).toUpperCase() + s.slice(1);\n\nconst styles = {\n  completed: {},\n  onflight: {\n    backgroundColor: 'primary.main',\n    color: 'white',\n  },\n  scheduled: {\n    backgroundColor: 'violet',\n  }\n}\n\nconst Status = ({ status }) =>\n  <Chip\n    size='small'\n    label={capitalize(status)}\n    sx={{\n      width: '100px',\n      ...styles[status]\n    }}\n  />\n\nconst columns = [\n  {\n    field: 'id',\n    headerName: 'ID',\n  },\n  {\n    field: 'flight_number',\n    headerName: 'Flight Number',\n    flex: 1,\n  },\n  {\n    field: 'departure_airport',\n    headerName: 'From',\n    flex: 1,\n  },\n  {\n    field: 'destination_airport',\n    headerName: 'To',\n    flex: 1,\n  },\n  {\n    field: 'departure_time',\n    headerName: 'Departure',\n    flex: 2,\n    valueFormatter: dateFormatter,\n  },\n  {\n    field: 'arrival_time',\n    headerName: 'Arrival',\n    flex: 2,\n    valueFormatter: dateFormatter,\n  },\n  {\n    field: 'gate_number',\n    headerName: 'Gate',\n    flex: 1,\n  },\n  {\n    field: 'plane_registration',\n    headerName: 'Registration',\n    flex: 1,\n  },\n  {\n    field: 'status',\n    headerName: 'Status',\n    flex: 1,\n    renderCell: params => <Status status={params.value} />\n  },\n];\n\nexport function ListFlight() {\n  // Note: MUI DataGrid requires all rows to have a unique `id` property.\n  // Since our database handles that case, we don't need to map any rows.\n  const rows = useLoaderData();\n\n  return (\n    <EmptyPage>\n      <Box flexGrow={1} height='100vh'>\n        <DataGrid\n          rows={rows}\n          columns={columns}\n          disableRowSelectionOnClick\n          slots={{\n            toolbar: GridToolbar,\n          }}\n        />\n      </Box>\n    </EmptyPage>\n  );\n}\n\nexport async function listFlightLoader() {\n  const response = await axios.get('/flight/all');\n  return response.data;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}